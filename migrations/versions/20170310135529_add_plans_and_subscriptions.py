# -*- coding: utf-8 -*-
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import datetime
import uuid

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd8f84d681c5d'
down_revision = '244d4ab5a66d'
branch_labels = None
depends_on = None


def make_uuid():
    return str(uuid.uuid4())


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    plans_table = op.create_table(
        'plans',
        sa.Column('id', sa.Unicode(), nullable=False),
        sa.Column('name', sa.Unicode(), nullable=False),
        sa.Column('description', sa.Unicode(), nullable=True),
        sa.Column('active', sa.Boolean(), nullable=True),
        sa.Column('price', sa.Integer(), nullable=True),
        sa.Column('frequency',
                  sa.Enum('', 'month', 'year', name='plan_frequencies'),
                  nullable=False),
        sa.Column('created', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id'),
    )

    op.bulk_insert(plans_table, [
        {
            'id': make_uuid(), 'name': 'free', 'description': '',
            'active': True, 'price': None, 'frequency': '',
            'created': datetime.datetime.utcnow()
        },
        {
            'id': make_uuid(), 'name': 'paid', 'description': '',
            'active': True, 'price': 1000, 'frequency': 'month',
            'created': datetime.datetime.utcnow()
        },
    ])

    op.create_table(
        'subscriptions',
        sa.Column('id', sa.Unicode(), nullable=False),
        sa.Column('plan_id', sa.Unicode(), nullable=True),
        sa.Column('user_id', sa.Unicode(), nullable=True),
        sa.Column('active', sa.Boolean(), nullable=True),
        sa.Column('started', sa.DateTime(timezone=True), nullable=True),
        sa.Column('expires', sa.DateTime(timezone=True), nullable=True),
        sa.Column('finished', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('subscriptions')
    op.drop_table('plans')
    # ### end Alembic commands ###
